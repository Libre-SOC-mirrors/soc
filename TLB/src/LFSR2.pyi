# SPDX-License-Identifier: LGPL-2.1-or-later
# See Notices.txt for copyright information
from nmigen import Module
from typing import Iterable, FrozenSet, Optional, Iterator, Any, Union
from typing_extensions import final
from collections.abc import Set


@final
class LFSRPolynomial(Set):
    def __init__(self, exponents: Iterable[int] = ()):
        def elements() -> Iterable[int]: ...
    @property
    def exponents(self) -> FrozenSet[int]: ...
    @property
    def max_exponent(self) -> int: ...
    def __hash__(self) -> int: ...
    def __contains__(self, x: Any) -> bool: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


@final
class LFSR:
    def __init__(self, polynomial: Union[Iterable[int], LFSRPolynomial]): ...
    @property
    def polynomial(self) -> LFSRPolynomial: ...
    @property
    def width(self) -> int: ...
    def elaborate(self, platform: Any) -> Module: ...
