# python code-writer for OpenPOWER ISA pseudo-code parsing

import os
from soc.decoder.pseudo.pagereader import ISA
from soc.decoder.power_pseudo import convert_to_python
from soc.decoder.orderedset import OrderedSet
from soc.decoder.isa.caller import create_args

def get_isasrc_dir():
    fdir = os.path.abspath(os.path.dirname(__file__))
    fdir = os.path.split(fdir)[0]
    return os.path.join(fdir, "isa")


header = """\
# auto-generated by pywriter.py, do not edit or commit

from soc.decoder.isa.caller import inject
from soc.decoder.helpers import (EXTS, EXTS64, EXTZ64, ROTL64, ROTL32, MASK,)
from soc.decoder.selectable_int import SelectableInt
from soc.decoder.selectable_int import selectconcat as concat
from soc.decoder.orderedset import OrderedSet

class %s:

"""

class PyISAWriter(ISA):
    def __init__(self):
        ISA.__init__(self)
        self.pages_written = []

    def write_pysource(self, pagename):
        self.pages_written.append(pagename)
        instrs = isa.page[pagename]
        isadir = get_isasrc_dir()
        fname = os.path.join(isadir, "%s.py" % pagename)
        with open(fname, "w") as f:
            iinf = ''
            f.write(header % pagename) # write out header
            # go through all instructions
            for page in instrs:
                d = self.instr[page]
                print (fname, d.opcode)
                pcode = '\n'.join(d.pcode) + '\n'
                print (pcode)
                pycode, rused = convert_to_python(pcode, d.form)
                # create list of arguments to call
                regs = list(rused['read_regs']) + list(rused['uninit_regs'])
                args = ', '.join(create_args(regs, 'self'))
                # create list of arguments to return
                retargs = ', '.join(create_args(rused['write_regs']))
                # write out function.  pre-pend "op_" because some instrs are
                # also python keywords (cmp).  also replace "." with "_"
                op_fname ="op_%s" % page.replace(".", "_")
                f.write("    @inject()\n")
                f.write("    def %s(%s):\n" % (op_fname, args))
                pycode = pycode.split("\n")
                pycode = '\n'.join(map(lambda x: "        %s" % x, pycode))
                pycode = pycode.rstrip()
                f.write(pycode + '\n')
                if retargs:
                    f.write("        return (%s,)\n\n" % retargs)
                else:
                    f.write("\n")
                # accumulate the instruction info
                ops = repr(rused['op_fields'])
                iinfo = """(%s, %s,
                %s, %s,
                %s, '%s')""" % (op_fname, rused['read_regs'],
                                rused['uninit_regs'], rused['write_regs'],
                                ops, d.form)
                iinf += "    %s_instrs['%s'] = %s\n" % (pagename, page, iinfo)
            # write out initialisation of info, for ISACaller to use
            f.write("    %s_instrs = {}\n" % pagename)
            f.write(iinf)

    def write_isa_class(self):
        isadir = get_isasrc_dir()
        fname = os.path.join(isadir, "all.py")

        with open(fname, "w") as f:
            f.write('from soc.decoder.isa.caller import ISACaller\n')
            for page in self.pages_written:
                f.write('from soc.decoder.isa.%s import %s\n' % (page, page))
            f.write('\n')

            classes = ', '.join(['ISACaller'] + self.pages_written)
            f.write('class ISA(%s):\n' % classes)
            f.write('    def __init__(self, dec, regs):\n')
            f.write('        super().__init__(dec, regs)\n')
            f.write('        self.instrs = {\n')
            for page in self.pages_written:
                f.write('            **self.%s_instrs,\n' % page)
            f.write('        }\n')





if __name__ == '__main__':
    isa = PyISAWriter()
    isa.write_pysource('fixedarith')
    isa.write_pysource('sprset')
    #isa.write_pysource('system')
    isa.write_isa_class()
    exit(0)
    isa.write_pysource('stringldst')
    isa.write_pysource('fixedshift')
    isa.write_pysource('condition')
    isa.write_pysource('fixedtrap')
    isa.write_pysource('branch')
    isa.write_pysource('fixedlogical')
    isa.write_pysource('fixedstore')
    isa.write_pysource('fixedload')
    isa.write_pysource('comparefixed')
